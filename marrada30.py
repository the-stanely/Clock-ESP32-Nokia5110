# Code generated by font_to_py.py.
# Font: marrada.ttf Char set:  .0123456789:
# Cmd: font_to_py.py -x --charset  0123456789:. marrada.ttf 30 marrada30.py
version = '0.33'

def height():
    return 30

def baseline():
    return 30

def max_width():
    return 12

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 63

_font =\
b'\x0b\x00\x7f\x00\xff\x00\xff\x80\xe3\x80\xe3\x80\xe3\x80\xe3\x80'\
b'\xe3\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x0f\x80'\
b'\x1f\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00'\
b'\x1c\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x1c\x00\x1c\x00\x09\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xe0\xe0\x0c\x00\x3f\x00'\
b'\x7f\x80\xff\xc0\xe1\xc0\xe1\xc0\xe3\xc0\xe7\xc0\xef\xc0\xff\xc0'\
b'\xff\xc0\xfd\xc0\xf9\xc0\xf1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0'\
b'\xe3\xc0\xe7\xc0\xef\xc0\xff\xc0\xff\xc0\xfd\xc0\xf9\xc0\xf1\xc0'\
b'\xe1\xc0\xe1\xc0\xff\xc0\x7f\x80\x3f\x00\x0c\x00\x1c\x00\x1c\x00'\
b'\x3c\x00\x7c\x00\xfc\x00\xfc\x00\xdc\x00\x1c\x00\x1c\x00\x1c\x00'\
b'\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00'\
b'\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00'\
b'\x1c\x00\xff\xc0\xff\xc0\xff\xc0\x0c\x00\x3f\x00\x7f\x80\xff\xc0'\
b'\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\x01\xc0\x01\xc0\x01\xc0'\
b'\x01\xc0\x01\xc0\x01\xc0\x3f\xc0\xff\x80\xff\x00\xe0\x00\xe0\x00'\
b'\xe0\x00\xe0\x00\xe0\x00\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0'\
b'\xff\xc0\xff\xc0\xff\xc0\x0c\x00\x3f\x00\x7f\x80\xff\xc0\xe1\xc0'\
b'\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0'\
b'\x07\xc0\x1f\xc0\x1f\x00\x1f\x00\x1f\xc0\x07\xc0\x01\xc0\x01\xc0'\
b'\x01\xc0\x01\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xff\xc0'\
b'\x7f\x80\x3f\x00\x0c\x00\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0'\
b'\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0'\
b'\xe1\xc0\xff\xc0\xff\xc0\xff\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0'\
b'\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0'\
b'\x01\xc0\x0c\x00\xff\xc0\xff\xc0\xff\xc0\xe1\xc0\xe1\xc0\xe1\xc0'\
b'\xe1\xc0\xe1\xc0\xe0\x00\xe0\x00\xe0\x00\xe0\x00\xe0\x00\xe0\x00'\
b'\xff\x00\x7f\x80\x3f\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0'\
b'\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xff\xc0\xff\xc0\x3f\x00'\
b'\x0c\x00\x3f\x00\x7f\x80\xff\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0'\
b'\xe1\xc0\xe0\x00\xe0\x00\xe0\x00\xe0\x00\xe0\x00\xe0\x00\xff\x00'\
b'\xff\x80\xff\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0'\
b'\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xff\xc0\x7f\xc0\x3f\x00\x0c\x00'\
b'\xff\x80\xff\x80\xff\x80\xe3\x80\xe3\x80\xe3\x80\xe3\x80\xe3\x80'\
b'\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x0f\x80\x1f\x80'\
b'\x1f\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00'\
b'\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x1c\x00\x0c\x00\x3f\x00'\
b'\x7f\x80\xff\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0'\
b'\xe1\xc0\xe1\xc0\xe1\xc0\xff\xc0\xff\xc0\x3f\x00\x3f\x00\xff\xc0'\
b'\xff\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0'\
b'\xe1\xc0\xe1\xc0\xff\xc0\x7f\x80\x3f\x00\x0c\x00\x3f\x00\x7f\x80'\
b'\xff\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0'\
b'\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xff\xc0\x7f\xc0\x3f\xc0\x01\xc0'\
b'\x01\xc0\x01\xc0\x01\xc0\x01\xc0\xe1\xc0\xe1\xc0\xe1\xc0\xe1\xc0'\
b'\xe1\xc0\xff\xc0\xff\x80\x3f\x00\x05\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\xe0\xe0\xe0\x00\x00\x00\x00\xe0\xe0\xe0\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00'

_index =\
b'\x00\x00\x3e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7c\x00'\
b'\x00\x00\x9c\x00\xda\x00\x18\x01\x56\x01\x94\x01\xd2\x01\x10\x02'\
b'\x4e\x02\x8c\x02\xca\x02\x08\x03\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x28\x03'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 63 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 30
    return _mvfont[doff + 2:next_offs], 30, width
 
